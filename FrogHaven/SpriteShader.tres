[gd_resource type="VisualShader" load_steps=24 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorCompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=9]

[sub_resource type="VisualShaderNodeScalarOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 0.157 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=14]
uniform_name = "AngleMax"

[sub_resource type="VisualShaderNodeScalarOp" id=15]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "AngleSpeed"

[sub_resource type="VisualShaderNodeScalarOp" id=21]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=22]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=23]
uniform_name = "ScaleMax"

[sub_resource type="VisualShaderNodeScalarUniform" id=24]
uniform_name = "ScaleMin"

[sub_resource type="VisualShaderNodeScalarUniform" id=25]
uniform_name = "ScaleSpeed"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarFunc" id=17]
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
function = 1

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorDecompose" id=20]

[resource]
code = "shader_type canvas_item;
uniform float AngleSpeed;
uniform float AngleMax;



void vertex() {
// Input:8
	float n_out8p0 = TIME;

// ScalarUniform:21
	float n_out21p0 = AngleSpeed;

// ScalarOp:20
	float n_out20p0 = n_out8p0 * n_out21p0;

// ScalarFunc:17
	float n_out17p0 = round(n_out20p0);

// ScalarUniform:19
	float n_out19p0 = AngleMax;

// ScalarOp:18
	float n_out18p0 = n_out17p0 * n_out19p0;

// ScalarFunc:7
	float n_out7p0 = cos(n_out18p0);

// Input:4
	vec3 n_out4p0 = vec3(VERTEX, 0.0);

// VectorDecompose:9
	float n_out9p0 = n_out4p0.x;
	float n_out9p1 = n_out4p0.y;
	float n_out9p2 = n_out4p0.z;

// ScalarOp:11
	float n_out11p0 = n_out7p0 * n_out9p0;

// ScalarFunc:6
	float n_out6p0 = sin(n_out18p0);

// ScalarOp:16
	float n_out16p0 = n_out6p0 * n_out9p1;

// ScalarOp:13
	float n_out13p0 = n_out11p0 - n_out16p0;

// ScalarOp:15
	float n_out15p0 = n_out6p0 * n_out9p0;

// ScalarOp:12
	float n_out12p0 = n_out7p0 * n_out9p1;

// ScalarOp:14
	float n_out14p0 = n_out15p0 + n_out12p0;

// VectorCompose:10
	vec3 n_out10p0 = vec3(n_out13p0, n_out14p0, n_out9p2);

// Output:0
	VERTEX = n_out10p0.xy;

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Output:0
	COLOR.rgb = n_out2p0;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 1320, 160 )
nodes/vertex/4/node = SubResource( 4 )
nodes/vertex/4/position = Vector2( -480, 600 )
nodes/vertex/6/node = SubResource( 17 )
nodes/vertex/6/position = Vector2( -20, 120 )
nodes/vertex/7/node = SubResource( 18 )
nodes/vertex/7/position = Vector2( -20, 60 )
nodes/vertex/8/node = SubResource( 19 )
nodes/vertex/8/position = Vector2( -780, 80 )
nodes/vertex/9/node = SubResource( 20 )
nodes/vertex/9/position = Vector2( -300, 600 )
nodes/vertex/10/node = SubResource( 5 )
nodes/vertex/10/position = Vector2( 1340, 680 )
nodes/vertex/11/node = SubResource( 6 )
nodes/vertex/11/position = Vector2( 260, 60 )
nodes/vertex/12/node = SubResource( 7 )
nodes/vertex/12/position = Vector2( 260, 160 )
nodes/vertex/13/node = SubResource( 8 )
nodes/vertex/13/position = Vector2( 660, 80 )
nodes/vertex/14/node = SubResource( 9 )
nodes/vertex/14/position = Vector2( 560, 240 )
nodes/vertex/15/node = SubResource( 10 )
nodes/vertex/15/position = Vector2( 260, -40 )
nodes/vertex/16/node = SubResource( 11 )
nodes/vertex/16/position = Vector2( 260, 260 )
nodes/vertex/17/node = SubResource( 12 )
nodes/vertex/17/position = Vector2( -420, 80 )
nodes/vertex/18/node = SubResource( 13 )
nodes/vertex/18/position = Vector2( -240, 60 )
nodes/vertex/19/node = SubResource( 14 )
nodes/vertex/19/position = Vector2( -440, 140 )
nodes/vertex/20/node = SubResource( 15 )
nodes/vertex/20/position = Vector2( -620, 60 )
nodes/vertex/21/node = SubResource( 16 )
nodes/vertex/21/position = Vector2( -820, 140 )
nodes/vertex/22/node = SubResource( 21 )
nodes/vertex/22/position = Vector2( 941.624, 268.04 )
nodes/vertex/23/node = SubResource( 22 )
nodes/vertex/23/position = Vector2( 940, 380 )
nodes/vertex/24/node = SubResource( 23 )
nodes/vertex/24/position = Vector2( 540, 480 )
nodes/vertex/25/node = SubResource( 24 )
nodes/vertex/25/position = Vector2( 540, 540 )
nodes/vertex/26/node = SubResource( 25 )
nodes/vertex/26/position = Vector2( 240, 460 )
nodes/vertex/connections = PoolIntArray( 4, 0, 9, 0, 10, 0, 0, 0, 9, 2, 10, 2, 9, 0, 11, 1, 7, 0, 11, 0, 9, 1, 12, 1, 11, 0, 13, 0, 13, 0, 10, 0, 14, 0, 10, 1, 9, 0, 15, 1, 6, 0, 15, 0, 7, 0, 12, 0, 6, 0, 16, 0, 9, 1, 16, 1, 15, 0, 14, 0, 16, 0, 13, 1, 12, 0, 14, 1, 17, 0, 18, 0, 18, 0, 7, 0, 18, 0, 6, 0, 19, 0, 18, 1, 8, 0, 20, 0, 20, 0, 17, 0, 21, 0, 20, 1, 13, 0, 22, 0, 14, 0, 23, 0, 24, 0, 22, 1 )
nodes/fragment/0/position = Vector2( 880, 120 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 620, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )
